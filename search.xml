<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring系列学习</title>
    <url>/posts/springboot-study-1/</url>
    <content><![CDATA[<h2 id="Spring-系列教程"><a href="#Spring-系列教程" class="headerlink" title="Spring 系列教程"></a>Spring 系列教程</h2><p>该仓库为个人博客<a href="https://mrbird.cc/">https://mrbird.cc</a>中Spring系列源码，包含Spring Boot、Spring Boot &amp; Shiro、Spring Cloud，Spring Boot &amp; Spring Security &amp; Spring Security OAuth2，仓库地址为<a href="https://github.com/wuyouzhuguli/SpringAll">https://github.com/wuyouzhuguli/SpringAll</a></p>
<h3 id="Spring-Boot教程"><a href="#Spring-Boot教程" class="headerlink" title="Spring Boot教程"></a>Spring Boot教程</h3><ol>
<li><a href="https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html">开启Spring Boot</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20basic%20config.html">Spring Boot基础配置</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20Mybatis.html">Spring Boot中使用MyBatis</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20JdbcTemplate.html">Spring Boot中使用JdbcTemplate</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-MyBatis%20Druid.html">Spring Boot MyBatis配置Druid多数据源</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-JdbcTemplate%20Druid.html">Spring Boot JdbcTemplate配置Druid多数据源</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-AOP%20log.html">Spring Boot AOP记录用户操作日志</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%E4%BD%BF%E7%94%A8thymeleaf.html">Spring Boot中使用thymeleaf</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20cache.html">Spring Boot中使用Redis缓存数据</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20cache.html">Spring Boot中使用Ehcache缓存数据</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20JSON.html">Spring Boot中的JSON技术</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20TESTing.html">Spring Boot中编写单元测试</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Swagger2-RESTful-API.html">Spring Boot整合Swagger2构建RESTful API</a></li>
<li><a href="https://mrbird.cc/Acutator-Spring-Boot.html">使用Actuator监控Spring Boot应用</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Email.html">使用Spring Boot发送邮件</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Admin.html">使用Spring Boot Admin监控服务</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Devtools.html">Spring Boot Devtools热部署</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-logback.html">Spring Boot logback日志配置</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20war.html">Spring Boot项目打包成war包</a></li>
<li><a href="https://mrbird.cc/Linux%20Spring-Boot-jar.html">Linux下部署Spring Boot jar</a></li>
<li><a href="https://mrbird.cc/Jsoup%20XSS.html">Spring Boot中使用Jsoup防御XSS攻击</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Exception.html">Spring Boot异常处理</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Filter-Interceptor.html">Spring Boot中使用过滤器和拦截器</a></li>
<li><a href="https://mrbird.cc/MyBatis%20common%20Mapper%20PageHelper.html">Spring Boot整合MyBatis通用Mapper和PageHelper</a></li>
<li><a href="https://mrbird.cc/deepin-springboot-autoconfig.html">深入学习Spring Boot自动装配</a></li>
<li><a href="https://mrbird.cc/deepin-springboot-application.html">深入学习Spring Boot中的SpringApplication</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Hibernate-Validator-Params-Check.html">Spring Boot配合Hibernate Validator参数校验</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Diy-Resolver.html">自定义Spring Boot 内容协商</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Deal-CORS.html">Spring Boot 中处理跨域</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Async.html">Spring Boot 中的异步调用</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Kafka.html">Spring Boot 整合Kafka</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Mongo-DB-CRUD.html">Spring Boot整合Mongo DB</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-2-0-WebFlux.html">Spring Boot 2.0 WebFlux编程</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-WebFlux-CRUD.html">Spring Boot WebFlux增删改查样例</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%E6%95%B4%E5%90%88WebSocket.html">Spring Boot整合WebSocket</a></li>
</ol>
<h3 id="Spring-Boot-amp-Shiro教程"><a href="#Spring-Boot-amp-Shiro教程" class="headerlink" title="Spring Boot &amp; Shiro教程"></a>Spring Boot &amp; Shiro教程</h3><ol>
<li><a href="https://mrbird.cc/Spring-Boot-shiro%20Authentication.html">Spring Boot Shiro用户认证</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Shiro%20Remember-Me.html">Spring Boot Shiro Remember Me</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Shiro%20Authorization.html">Spring Boot Shiro权限控制</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Shiro%20cache.html">Spring Boot Shiro Redis</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Shiro%20cache.html">Spring Boot Shiro Ehcache</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Themeleaf%20Shiro%20tag.html">Spring Boot Thymeleaf中使用Shiro标签</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Shiro%20session.html">Spring Boot Shiro在线会话管理</a></li>
<li><a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/62.Spring-Boot-Shiro-JWT">Spring Boot Shiro整合JWT</a></li>
</ol>
<h3 id="Spring-Boot-amp-Security教程"><a href="#Spring-Boot-amp-Security教程" class="headerlink" title="Spring Boot &amp; Security教程"></a>Spring Boot &amp; Security教程</h3><ol>
<li><a href="https://mrbird.cc/Spring-Boot&amp;Spring-Security.html">Spring Boot中开启Spring Security</a></li>
<li><a href="https://mrbird.cc/Spring-Security-Authentication.html">Spring Security自定义用户认证</a></li>
<li><a href="https://mrbird.cc/Spring-Security-ValidateCode.html">Spring Security添加图形验证码</a></li>
<li><a href="https://mrbird.cc/Spring-Security-RememberMe.html">Spring Security添加记住我功能</a></li>
<li><a href="https://mrbird.cc/Spring-Security-SmsCode.html">Spring Security短信验证码登录</a></li>
<li><a href="https://mrbird.cc/Spring-Security-Session-Manage.html">Spring Security Session管理</a></li>
<li><a href="https://mrbird.cc/Spring-Security-logout.html">Spring Security退出登录</a></li>
<li><a href="https://mrbird.cc/Spring-Security-Permission.html">Spring Security权限控制</a></li>
<li><a href="https://mrbird.cc/Spring-Security-OAuth2-Guide.html">Spring Security OAuth2入门</a></li>
<li><a href="https://mrbird.cc/Spring-Security-OAuth2-Customize.html">Spring Security OAuth2自定义Token获取方式</a></li>
<li><a href="https://mrbird.cc/Spring-Security-OAuth2-Token-Config.html">Spring Security OAuth2自定义令牌配置</a></li>
<li><a href="https://mrbird.cc/Spring-Security-OAuth2-SSO.html">Spring Security OAuth2单点登录</a></li>
</ol>
<h3 id="Spring-Cloud教程"><a href="#Spring-Cloud教程" class="headerlink" title="Spring Cloud教程"></a>Spring Cloud教程</h3><ol>
<li><a href="https://mrbird.cc/Spring-Cloud%20and%20MicroService.html">初识Spring Cloud与微服务</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Eureka.html">Spring Cloud Eureka服务治理</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Ribbon-LoadBalance.html">Spring Cloud Ribbon客户端负载均衡</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Hystrix-Circuit-Breaker.html">Spring Cloud Hystrix服务容错</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html">Spring Cloud Hystrix Dashboard仪表盘</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html">Spring Cloud Hystrix Dashboard仪表盘 &amp; RabbitMQ</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Feign.html">Spring Cloud Feign 声明式服务调用</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Zuul-Router.html">Spring Cloud Zuul服务网关</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Config.html">Spring Cloud Config统一配置管理</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Bus.html">使用Spring Cloud Bus刷新配置</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-sleuth.html">使用Spring Cloud Sleuth跟踪微服务</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Consul.html">Spring Cloud Consul服务治理</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html">Spring Cloud Alibaba Nacos注册中心</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Alibaba-Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html">Spring Cloud Alibaba Nacos配置中心</a></li>
<li><a href="https://mrbird.cc/Sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AF%A6%E8%A7%A3.html">Spring Cloud Alibaba Sentinel控制台详解</a></li>
<li><a href="https://mrbird.cc/Spring-Cloud-Alibaba-Sentinel-SentinelResource.html">Spring Cloud Alibaba Sentinel @SentinelResource</a></li>
</ol>
<h3 id="Spring-Boot-amp-amp-Dubbo教程"><a href="#Spring-Boot-amp-amp-Dubbo教程" class="headerlink" title="Spring Boot &amp;&amp; Dubbo教程"></a>Spring Boot &amp;&amp; Dubbo教程</h3><ol>
<li><a href="https://mrbird.cc/Spring-Boot-Dubbo-Zookeeper.html">Spring Boot整合Dubbo&amp;Zookeeper</a></li>
<li><a href="https://mrbird.cc/dubbo-mointor.html">监控Dubbo服务</a></li>
<li><a href="https://mrbird.cc/Dubbo-High-Availability.html">Dubbo的高可用</a></li>
</ol>
<h3 id="Spring-Boot-amp-amp-Spring-Batch教程"><a href="#Spring-Boot-amp-amp-Spring-Batch教程" class="headerlink" title="Spring Boot &amp;&amp; Spring Batch教程"></a>Spring Boot &amp;&amp; Spring Batch教程</h3><ol>
<li><a href="https://mrbird.cc/Spring-Batch%E5%85%A5%E9%97%A8.html">Spring Batch入门</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.html">Spring Batch读取数据</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE.html">Spring Batch输出数据</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE.html">Spring Batch处理数据</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E7%9B%91%E5%90%AC%E5%99%A8.html">Spring Batch监听器</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html">Spring Batch异常处理</a></li>
<li><a href="https://mrbird.cc/Spring-Batch%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html">Spring Batch任务调度</a></li>
</ol>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ol>
<li><a href="https://mrbird.cc/Spring-Bean-Regist.html">深入学习Spring组件注册</a></li>
<li><a href="https://mrbird.cc/Spring-Bean-Lifecycle.html">深入学习Spring Bean生命周期</a></li>
</ol>
<p>持续更新中…</p>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>实用网站</title>
    <url>/posts/tools-urls/</url>
    <content><![CDATA[<p>免费图床: <a href="https://sm.ms/">https://sm.ms/</a></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis打印最终sql</title>
    <url>/posts/mybatis-print-sql/</url>
    <content><![CDATA[<h2 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h2><p>使用mybatis打印sql和参数的一般做法是在配置文件中配置log-impl，例如</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure>

<p>但是这样使用的话最终输出还是没有完成拼接的sql，如果一条sql有很多个参数的情况下，我们还要手动一个个参数填上去</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from db where host = ? </span><br><span class="line">==&gt; Parameters: localhost(String)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="增加Interceptor"><a href="#增加Interceptor" class="headerlink" title="增加Interceptor"></a>增加Interceptor</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Plugin;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts({</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = "update", args = { MappedStatement.class, Object.class }),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = "query", args = { MappedStatement.class, Object.class,</span></span><br><span class="line"><span class="meta">                RowBounds.class, ResultHandler.class }) })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        Object parameter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (invocation.getArgs().length &gt; <span class="number">1</span>) {</span><br><span class="line">            parameter = invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        String sqlId = mappedStatement.getId();</span><br><span class="line">        BoundSql boundSql = mappedStatement.getBoundSql(parameter);</span><br><span class="line">        Configuration configuration = mappedStatement.getConfiguration();</span><br><span class="line">        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        returnValue = invocation.proceed();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = (end - start);</span><br><span class="line">        <span class="keyword">if</span> (time &gt; <span class="number">1</span>) {</span><br><span class="line">            String sql = getSql(configuration, boundSql, sqlId, time);</span><br><span class="line">            System.err.println(sql);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSql</span><span class="params">(Configuration configuration, BoundSql boundSql, String sqlId, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        String sql = showSql(configuration, boundSql);</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="number">100</span>);</span><br><span class="line">        str.append(sqlId);</span><br><span class="line">        str.append(<span class="string">":"</span>);</span><br><span class="line">        str.append(sql);</span><br><span class="line">        str.append(<span class="string">":"</span>);</span><br><span class="line">        str.append(time);</span><br><span class="line">        str.append(<span class="string">"ms"</span>);</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getParameterValue</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        String value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) {</span><br><span class="line">            value = <span class="string">"'"</span> + obj.toString() + <span class="string">"'"</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) {</span><br><span class="line">            DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);</span><br><span class="line">            value = <span class="string">"'"</span> + formatter.format(<span class="keyword">new</span> Date()) + <span class="string">"'"</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="keyword">null</span>) {</span><br><span class="line">                value = obj.toString();</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                value = <span class="string">""</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">showSql</span><span class="params">(Configuration configuration, BoundSql boundSql)</span> </span>{</span><br><span class="line">        Object parameterObject = boundSql.getParameterObject();</span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        String sql = boundSql.getSql().replaceAll(<span class="string">"[\\s]+"</span>, <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (parameterMappings.size() &gt; <span class="number">0</span> &amp;&amp; parameterObject != <span class="keyword">null</span>) {</span><br><span class="line">            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">            <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {</span><br><span class="line">                sql = sql.replaceFirst(<span class="string">"\\?"</span>, getParameterValue(parameterObject));</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">                <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) {</span><br><span class="line">                    String propertyName = parameterMapping.getProperty();</span><br><span class="line">                    <span class="keyword">if</span> (metaObject.hasGetter(propertyName)) {</span><br><span class="line">                        Object obj = metaObject.getValue(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, getParameterValue(obj));</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) {</span><br><span class="line">                        Object obj = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">"\\?"</span>, getParameterValue(obj));</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties0)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.properties = properties0;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>需要注意的是这里<font color="red"><strong>导入的类都是org.apache.ibatis</strong></font>下的，不是aop的。</p>
<p>然后把这个拦截器加入到mybatis的拦截器配置中，就可以打印完整的sql语句了</p>
<p>具体有三种做法</p>
<ol>
<li>添加component注解，交给springboot管理</li>
<li>通过配置类注入</li>
<li>通过添加mybatis的xml配置文件</li>
</ol>
<p>最终执行结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">com.mjc.druid.data.mapper.HelloMapper.getHosts:select * from db where host = <span class="string">'localhost'</span>:<span class="number">118</span>ms</span><br></pre></td></tr></tbody></table></figure>

<p>参考文章:</p>
<ul>
<li><a href="https://www.iteye.com/blog/zhanghteye-2373231">Mybatis拦截器实现统计sql执行时间及打印完整sql语句</a></li>
<li><a href="https://www.cnblogs.com/A-yes/p/10619390.html">SpringBoot使用自定义Mybatis拦截器</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>我的第一个站点</title>
    <url>/posts/my-first-site/</url>
    <content><![CDATA[<h1 id="本站说明"><a href="#本站说明" class="headerlink" title="本站说明"></a>本站说明</h1><p>本博客使用Vercel托管hexo静态页面，使用腾讯云域名注册，主题使用<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a>，配置步骤参考<a href="https://demo.jerryc.me/">https://demo.jerryc.me/</a></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/posts/design-pattern-singleton/</url>
    <content><![CDATA[<h1 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern)"></a>单例模式(Singleton Pattern)</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>  单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>  这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li><p>单例类只能有一个实例。</p>
</li>
<li><p>单例类必须自己创建自己的唯一实例。</p>
</li>
<li><p>单例类必须给所有其他对象提供这一实例。</p>
</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li><p>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例</p>
</li>
<li><p>避免对资源的多重占用</p>
</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没有接口，不能继承，与<strong>单一职责原则</strong>冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现单例模式关键点在于<strong>构造函数私有化</strong>，同时又分为饿汉式，懒汉式，枚举等实现方式</p>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>根据具体实现方式又分为静态变量，静态常量和静态代码块等</p>
<div class="tabs" id="饿汉式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#饿汉式-1">饿汉式(静态变量)</button></li><li class="tab"><button type="button" data-href="#饿汉式-2">饿汉式(静态常量)</button></li><li class="tab"><button type="button" data-href="#饿汉式-3">饿汉式(静态代码块)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="饿汉式-1"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="饿汉式-2"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="饿汉式-3"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>该方式的优点是写法简单，并且是线程安全的，没有加锁，执行效率会提高。</p>
<p>缺点是该对象在类装载载的时候就进行了实例化，没有达到懒加载的目的，容易造成内存浪费。</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><div class="tabs" id="懒汉式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#懒汉式-1">懒汉式(线程不安全)</button></li><li class="tab"><button type="button" data-href="#懒汉式-2">懒汉式(线程安全，同步方法)</button></li><li class="tab"><button type="button" data-href="#懒汉式-3">懒汉式(线程不安全，同步代码块)</button></li><li class="tab"><button type="button" data-href="#懒汉式-4">懒汉式(线程安全，双重检测锁(DCL))</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="懒汉式-1"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果同时又两个线程调用getInstance方法，同时执行if (instance == null)的判断，由于对方还未进行实例化操作，导致双方都new出了一个对象</span></span><br><span class="line"><span class="comment"> * 多线程环境禁止使用该方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>{}  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="懒汉式-2"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在方法级别加锁，效率低下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>{}  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="懒汉式-3"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个线程同时通过if (instance == null)，依旧会多次new对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                instance  = <span class="keyword">new</span> Singleton();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="懒汉式-4"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检测，线程A获得锁之后，即使线程B通过了if (instance == null)，由于获取不到A正在持有的锁，进入等待。</span></span><br><span class="line"><span class="comment"> * 使用volatile保证程序从主内存读取对象，禁止指令重排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance  = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与饿汉式同样利用类加载机制来保证初始化实例时只有一个线程，而这种方式是 Singleton 类被装载了，instance 不一定被初始化。</span></span><br><span class="line"><span class="comment"> * 因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{  </span><br><span class="line">    	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>{</span><br><span class="line">    }  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{  </span><br><span class="line">    	<span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化, Effective Java 作者 Josh Bloch 提倡的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>{  </span><br><span class="line">    INSTANCE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><div class="tabs" id="反序列化破解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#反序列化破解-1">反序列化破解单例</button></li><li class="tab"><button type="button" data-href="#反序列化破解-2">防止反序列化破解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="反序列化破解-1"><p>Singleton.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>DeserializeSingleton.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeSingleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String path = <span class="string">"本地路径"</span>;</span><br><span class="line">        <span class="comment">// 任意枚举除外的单例模式</span></span><br><span class="line">        Singleton s1 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将s写入本地某个路径</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(s1);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从本地某个路径读取写入的对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">        Singleton s2 = (Singleton) ois.readObject();</span><br><span class="line">        System.out.println(s1); <span class="comment">// 我的s1输出：singleton.Singleton@14ae5a5</span></span><br><span class="line">        System.out.println(s2); <span class="comment">// 我的s2输出：singleton.Singleton@6d03e736</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="反序列化破解-2"><p>下面是来自ObjectInputStream类的注释</p>
<blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">* If the deserialized object defines a readResolve method</span><br><span class="line">* and the invocation of that method returns an array, then readUnshared</span><br><span class="line">* returns a shallow clone of that array; this guarantees that the returned</span><br><span class="line">* array object is unique and cannot be obtained a second time from an</span><br><span class="line">* invocation of readObject or readUnshared on the ObjectInputStream,</span><br><span class="line">* even if the underlying data stream has been manipulated.</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>大致意思是如果被反序列化的对象定义了readResolve方法,那么ObjectInputStream的readUnshared将返回一个对象的浅克隆，这保证了对象是唯一的并且不能通过调用ObjectInputStream的方法进行二次获得。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//反序列化定义该方法，则不需要创建新对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再次调用DeserializeSingleton打印结果</p>
<p><img src="/mysource/image-20201027184110777.png" alt="image-20201027184110777"></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>首先要明白一点，只有<strong>枚举</strong>可以防止反射。</p>
<div class="tabs" id="反序列化破解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#反序列化破解-1">反射破解单例</button></li><li class="tab"><button type="button" data-href="#反序列化破解-2">枚举防止反射</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="反序列化破解-1"><p>Singleton.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>ReflectSingleton.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectSingleton</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        Singleton s1=Singleton.getInstance();</span><br><span class="line">        Singleton s2=Singleton.getInstance();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"=============反射破解单例==============="</span>);</span><br><span class="line">        <span class="comment">// Class&lt;?&gt; clazz = Class.forName("singleton.Singleton"); //全路径名：包名.类名</span></span><br><span class="line">        Class&lt;?&gt; clazz = s1.getClass();</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Singleton s3 = (Singleton) constructor.newInstance(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<p><img src="/mysource/image-20201027190137930.png" alt="image-20201027190137930"></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="反序列化破解-2"><p>枚举防止反射的原理分析</p>
<p>首先从ReflectSingleton看出，生成新的对象关键在于constructor.newInstance(null)，下面是Constructor.newInstance()方法代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">           IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!override) {</span><br><span class="line">        <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     <span class="comment">// 取得类修饰符和Modifier.ENUM(0x00004000)做位与运算,如果结果不等于0，就抛出IllegalArgumentException</span></span><br><span class="line">    <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">    ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">    <span class="keyword">if</span> (ca == <span class="keyword">null</span>) {</span><br><span class="line">        ca = acquireConstructorAccessor();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line">    T inst = (T) ca.newInstance(initargs);</span><br><span class="line">    <span class="keyword">return</span> inst;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>那么枚举类的修饰符是什么呢？</p>
<p>创建枚举类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    INSTANCE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>获取类修饰符的值并打印</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumModifier</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> mod = Singleton.class.getModifiers();</span><br><span class="line">        String modifiers = Modifier.toString(mod);</span><br><span class="line">        System.out.println(mod); <span class="comment">//打印结果16401</span></span><br><span class="line">        System.out.println(modifiers); <span class="comment">//打印结果public final</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>为了验证结果，使用javac 编译Singleton.java，再通过javap反编译Singleton.class（<font color="red">这个反编译结果并非最终结果，详细原因稍后再说</font>）</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\idea_workspace\design_pattern\src\singleton&gt; javac .\Singleton.java</span><br><span class="line"><span class="built_in">PS</span> D:\idea_workspace\design_pattern\src\singleton&gt; javap .\Singleton.class</span><br><span class="line">Compiled from <span class="string">"Singleton.java"</span></span><br><span class="line">public final <span class="class"><span class="keyword">class</span> <span class="title">singleton</span>.<span class="title">Singleton</span> <span class="title">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;<span class="title">singleton</span>.<span class="title">Singleton</span>&gt;</span> {</span><br><span class="line">  public <span class="keyword">static</span> final singleton.Singleton INSTANCE;</span><br><span class="line">  public <span class="keyword">static</span> singleton.Singleton<span class="function">[] <span class="title">values</span></span>();</span><br><span class="line">  public <span class="keyword">static</span> singleton.Singleton valueOf(java.lang.String);</span><br><span class="line">  <span class="keyword">static</span> {};</span><br><span class="line">}</span><br><span class="line"><span class="built_in">PS</span> D:\idea_workspace\design_pattern\src\singleton&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到输出是正确的，那么回到最初，clazz.getModifiers() &amp; Modifier.ENUM的结果是大于0的，当我们使用反射去创建对象的时候，理应会抛出IllegalArgumentException，让我们实验下我们的猜想</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectSingleton</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        Singleton s1=Singleton.INSTANCE;</span><br><span class="line">        Singleton s2=Singleton.INSTANCE;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"=============反射破解单例==============="</span>);</span><br><span class="line">        <span class="comment">// Class&lt;?&gt; clazz = Class.forName("singleton.Singleton"); //全路径名：包名.类名</span></span><br><span class="line">        Class&lt;?&gt; clazz = s1.getClass();</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Singleton s3 = (Singleton) constructor.newInstance(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/mysource/image-20201027202534412.png" alt="image-20201027202534412"></p>
<p>为什么执行结果和我们的预期不一致呢？</p>
<p>这就回到了我提到的javap反编译结果并非最终结果(我还使用JD-GUI查看，结果基本一致)，那么最终反编译结果是什么样呢？</p>
<p>这里要介绍一款很老的反编译工具：<a href="https://varaneckas.com/jad/">jad</a></p>
<p>将jad.exe放在Singleton.class的同级目录下，反编译Singleton.class</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">D:\idea_workspace\design_pattern\src\singleton&gt;jad <span class="literal">-p</span> Singleton.class</span><br><span class="line">// Decompiled by Jad v1.<span class="number">5.8</span>g. Copyright <span class="number">2001</span> Pavel Kouznetsov.</span><br><span class="line">// Jad home page: http://www.kpdus.com/jad.html</span><br><span class="line">// Decompiler options: packimports(<span class="number">3</span>)</span><br><span class="line">// Source File Name:   Singleton.java</span><br><span class="line"></span><br><span class="line">package singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public final <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="title">extends</span> <span class="title">Enum</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> Singleton<span class="function">[] <span class="title">values</span></span>()</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> (Singleton[])<span class="variable">$VALUES</span>.clone();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> Singleton valueOf(String s)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> (Singleton)Enum.valueOf(singleton/Singleton, s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private Singleton(String s, int i)</span><br><span class="line">    {</span><br><span class="line">        super(s, i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> final Singleton INSTANCE;</span><br><span class="line">    private <span class="keyword">static</span> final Singleton <span class="variable">$VALUES</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    {</span><br><span class="line">        INSTANCE = new Singleton(<span class="string">"INSTANCE"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$VALUES</span> = (new Singleton[] {</span><br><span class="line">            INSTANCE</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到jad反编译的结果里枚举类的构造函数是private Singleton(String s, int i)，那么让我们改造ReflectSingleton.java并打印结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectSingleton</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        Singleton s1=Singleton.INSTANCE;</span><br><span class="line">        Singleton s2=Singleton.INSTANCE;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"=============反射破解单例==============="</span>);</span><br><span class="line">        <span class="comment">// Class&lt;?&gt; clazz = Class.forName("singleton.Singleton"); //全路径名：包名.类名</span></span><br><span class="line">        Class&lt;?&gt; clazz = s1.getClass();</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Singleton s3 = (Singleton) constructor.newInstance(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/mysource/image-20201027204837678.png" alt="image-20201027204837678"></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>

]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s安装与使用(一)</title>
    <url>/posts/prepare-env-k8s/</url>
    <content><![CDATA[<h1 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h1><p>本次使用virtualbox+vagrant方式安装三台linux虚拟机，版本均为centos7，ssh工具为mobaxterm</p>
<p><a href="https://download.virtualbox.org/virtualbox/6.1.22/VirtualBox-6.1.22-144080-Win.exe">virtualbox下载</a></p>
<p><a href="https://releases.hashicorp.com/vagrant/2.2.16/vagrant_2.2.16_x86_64.msi">vagrant下载</a></p>
<p>下载完成直接安装，无需特殊配置。</p>
<p>安装完成在任意空文件夹执行</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">vagrant init</span><br></pre></td></tr></tbody></table></figure>

<p>将会生成一个Vagrant文件，由于k8s至少需要2台机器(一主一从)，所以需要修改Vagrant文件，生成至少2个虚拟机(两个文件夹执行两次vagrant init也是可以的，但是不建议这么做，本次是k8s学习，不要纠结于虚拟机)，修改后如下</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">Vagrant.configure("2")</span> <span class="string">do</span> <span class="string">|config|</span></span><br><span class="line"><span class="comment">#for循环创建3台虚拟机</span></span><br><span class="line">	<span class="string">(1..3).each</span> <span class="string">do</span> <span class="string">|i|</span></span><br><span class="line">		<span class="string">config.vm.define</span> <span class="string">"host#{i}"</span> <span class="string">do</span> <span class="string">|node|</span></span><br><span class="line">		<span class="comment">#linux发行版本，可根据个人习惯从https://app.vagrantup.com/boxes/search寻找版本</span></span><br><span class="line">			<span class="string">node.vm.box</span> <span class="string">=</span> <span class="string">"centos/7"</span></span><br><span class="line">			<span class="string">node.vm.hostname</span> <span class="string">=</span> <span class="string">"host#{i}"</span></span><br><span class="line">			<span class="comment"># 创建3台虚拟机，ip分别为 192.168.56.101/102/103，此处ip 192.168.56需要根据自己安装virtualbox生成的虚拟网卡修改，查看方式为点击virtualbox工具右侧三条横杠，选择网络，查看IPV4地址	</span></span><br><span class="line">			<span class="string">node.vm.network</span> <span class="string">"private_network"</span><span class="string">,</span> <span class="attr">ip:</span> <span class="string">"192.168.56.#{100+i}"</span><span class="string">,</span> <span class="attr">netmask:</span> <span class="string">"255.255.255.0"</span></span><br><span class="line">			<span class="string">node.vm.provider</span> <span class="string">"virtualbox"</span> <span class="string">do</span> <span class="string">|vb|</span></span><br><span class="line">				<span class="string">vb.name</span> <span class="string">=</span> <span class="string">"host#{i}"</span></span><br><span class="line">				<span class="string">vb.memory</span> <span class="string">=</span> <span class="string">"2048"</span></span><br><span class="line">				<span class="comment">#至少分配2核，否则k8s会安装不成功</span></span><br><span class="line">				<span class="string">vb.cpus</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line">			<span class="string">end</span></span><br><span class="line">		<span class="string">end</span></span><br><span class="line">	<span class="string">end</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></tbody></table></figure>

<p>保存文件，执行启动命令,由于需要从官方拉取镜像并创建3台虚拟机，所以此处须等待较长时间</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></tbody></table></figure>

<p>命令执行结果</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">D:\tool\vms</span><br><span class="line"><span class="variable">$</span> vagrant up</span><br><span class="line">Bringing machine <span class="string">'host1'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">Bringing machine <span class="string">'host2'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">Bringing machine <span class="string">'host3'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">==&gt; host1: Importing base box <span class="string">'centos/7'</span>...</span><br><span class="line">==&gt; host1: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">==&gt; host1: Checking <span class="keyword">if</span> box <span class="string">'centos/7'</span> version <span class="string">'2004.01'</span> is up to date...</span><br><span class="line">==&gt; host1: Setting the name of the VM: host1</span><br><span class="line">==&gt; host1: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">==&gt; host1: Preparing network interfaces based on configuration...</span><br><span class="line">    host1: Adapter <span class="number">1</span>: nat</span><br><span class="line">    host1: Adapter <span class="number">2</span>: hostonly</span><br><span class="line">==&gt; host1: Forwarding ports...</span><br><span class="line">    host1: <span class="number">22</span> (guest) =&gt; <span class="number">2222</span> (host) (adapter <span class="number">1</span>)</span><br><span class="line">==&gt; host1: Running <span class="string">'pre-boot'</span> VM customizations...</span><br><span class="line">==&gt; host1: Booting VM...</span><br><span class="line">==&gt; host1: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    host1: SSH address: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2222</span></span><br><span class="line">    host1: SSH username: vagrant</span><br><span class="line">    host1: SSH auth method: private key</span><br><span class="line">    host1:</span><br><span class="line">    host1: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    host1: this with a newly generated keypair <span class="keyword">for</span> better security.</span><br><span class="line">    host1:</span><br><span class="line">    host1: Inserting generated public key within guest...</span><br><span class="line">    host1: Removing insecure key from the guest <span class="keyword">if</span> it<span class="string">'s present...</span></span><br><span class="line"><span class="string">    host1: Key inserted! Disconnecting and reconnecting using new SSH key...</span></span><br><span class="line"><span class="string">==&gt; host1: Machine booted and ready!</span></span><br><span class="line"><span class="string">==&gt; host1: Checking for guest additions in VM...</span></span><br><span class="line"><span class="string">    host1: No guest additions were detected on the base box for this VM! Guest</span></span><br><span class="line"><span class="string">    host1: additions are required for forwarded ports, shared folders, host only</span></span><br><span class="line"><span class="string">    host1: networking, and more. If SSH fails on this machine, please install</span></span><br><span class="line"><span class="string">    host1: the guest additions and repackage the box to continue.</span></span><br><span class="line"><span class="string">    host1:</span></span><br><span class="line"><span class="string">    host1: This is not an error message; everything may continue to work properly,</span></span><br><span class="line"><span class="string">    host1: in which case you may ignore this message.</span></span><br><span class="line"><span class="string">==&gt; host1: Setting hostname...</span></span><br><span class="line"><span class="string">==&gt; host1: Configuring and enabling network interfaces...</span></span><br><span class="line"><span class="string">==&gt; host1: Rsyncing folder: /cygdrive/d/tool/vms/ =&gt; /vagrant</span></span><br><span class="line"><span class="string">==&gt; host2: Importing base box '</span>centos/<span class="number">7</span><span class="string">'...</span></span><br><span class="line"><span class="string">==&gt; host2: Matching MAC address for NAT networking...</span></span><br><span class="line"><span class="string">==&gt; host2: Checking if box '</span>centos/<span class="number">7</span><span class="string">' version '</span><span class="number">2004.01</span><span class="string">' is up to date...</span></span><br><span class="line"><span class="string">==&gt; host2: Setting the name of the VM: host2</span></span><br><span class="line"><span class="string">==&gt; host2: Fixed port collision for 22 =&gt; 2222. Now on port 2200.</span></span><br><span class="line"><span class="string">==&gt; host2: Clearing any previously set network interfaces...</span></span><br><span class="line"><span class="string">==&gt; host2: Preparing network interfaces based on configuration...</span></span><br><span class="line"><span class="string">    host2: Adapter 1: nat</span></span><br><span class="line"><span class="string">    host2: Adapter 2: hostonly</span></span><br><span class="line"><span class="string">==&gt; host2: Forwarding ports...</span></span><br><span class="line"><span class="string">    host2: 22 (guest) =&gt; 2200 (host) (adapter 1)</span></span><br><span class="line"><span class="string">==&gt; host2: Running '</span>pre<span class="literal">-boot</span><span class="string">' VM customizations...</span></span><br><span class="line"><span class="string">==&gt; host2: Booting VM...</span></span><br><span class="line"><span class="string">==&gt; host2: Waiting for machine to boot. This may take a few minutes...</span></span><br><span class="line"><span class="string">    host2: SSH address: 127.0.0.1:2200</span></span><br><span class="line"><span class="string">    host2: SSH username: vagrant</span></span><br><span class="line"><span class="string">    host2: SSH auth method: private key</span></span><br><span class="line"><span class="string">    host2:</span></span><br><span class="line"><span class="string">    host2: Vagrant insecure key detected. Vagrant will automatically replace</span></span><br><span class="line"><span class="string">    host2: this with a newly generated keypair for better security.</span></span><br><span class="line"><span class="string">    host2:</span></span><br><span class="line"><span class="string">    host2: Inserting generated public key within guest...</span></span><br><span class="line"><span class="string">    host2: Removing insecure key from the guest if it'</span>s present...</span><br><span class="line">    host2: Key inserted! Disconnecting and reconnecting <span class="keyword">using</span> new SSH key...</span><br><span class="line">==&gt; host2: Machine booted and ready!</span><br><span class="line">==&gt; host2: Checking <span class="keyword">for</span> guest additions <span class="keyword">in</span> VM...</span><br><span class="line">    host2: No guest additions were detected on the base box <span class="keyword">for</span> this VM! Guest</span><br><span class="line">    host2: additions are required <span class="keyword">for</span> forwarded ports, shared folders, host only</span><br><span class="line">    host2: networking, and more. <span class="keyword">If</span> SSH fails on this machine, please install</span><br><span class="line">    host2: the guest additions and repackage the box to <span class="keyword">continue</span>.</span><br><span class="line">    host2:</span><br><span class="line">    host2: This is not an error message; everything may <span class="keyword">continue</span> to work properly,</span><br><span class="line">    host2: <span class="keyword">in</span> which case you may ignore this message.</span><br><span class="line">==&gt; host2: Setting hostname...</span><br><span class="line">==&gt; host2: Configuring and enabling network interfaces...</span><br><span class="line">==&gt; host2: Rsyncing folder: /cygdrive/d/tool/vms/ =&gt; /vagrant</span><br><span class="line">==&gt; host3: Importing base box <span class="string">'centos/7'</span>...</span><br><span class="line">==&gt; host3: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">==&gt; host3: Checking <span class="keyword">if</span> box <span class="string">'centos/7'</span> version <span class="string">'2004.01'</span> is up to date...</span><br><span class="line">==&gt; host3: Setting the name of the VM: host3</span><br><span class="line">==&gt; host3: Fixed port collision <span class="keyword">for</span> <span class="number">22</span> =&gt; <span class="number">2222</span>. Now on port <span class="number">2201</span>.</span><br><span class="line">==&gt; host3: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">==&gt; host3: Preparing network interfaces based on configuration...</span><br><span class="line">    host3: Adapter <span class="number">1</span>: nat</span><br><span class="line">    host3: Adapter <span class="number">2</span>: hostonly</span><br><span class="line">==&gt; host3: Forwarding ports...</span><br><span class="line">    host3: <span class="number">22</span> (guest) =&gt; <span class="number">2201</span> (host) (adapter <span class="number">1</span>)</span><br><span class="line">==&gt; host3: Running <span class="string">'pre-boot'</span> VM customizations...</span><br><span class="line">==&gt; host3: Booting VM...</span><br><span class="line">==&gt; host3: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    host3: SSH address: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2201</span></span><br><span class="line">    host3: SSH username: vagrant</span><br><span class="line">    host3: SSH auth method: private key</span><br><span class="line">    host3:</span><br><span class="line">    host3: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    host3: this with a newly generated keypair <span class="keyword">for</span> better security.</span><br><span class="line">    host3:</span><br><span class="line">    host3: Inserting generated public key within guest...</span><br><span class="line">    host3: Removing insecure key from the guest <span class="keyword">if</span> it<span class="string">'s present...</span></span><br><span class="line"><span class="string">    host3: Key inserted! Disconnecting and reconnecting using new SSH key...</span></span><br><span class="line"><span class="string">==&gt; host3: Machine booted and ready!</span></span><br><span class="line"><span class="string">==&gt; host3: Checking for guest additions in VM...</span></span><br><span class="line"><span class="string">    host3: No guest additions were detected on the base box for this VM! Guest</span></span><br><span class="line"><span class="string">    host3: additions are required for forwarded ports, shared folders, host only</span></span><br><span class="line"><span class="string">    host3: networking, and more. If SSH fails on this machine, please install</span></span><br><span class="line"><span class="string">    host3: the guest additions and repackage the box to continue.</span></span><br><span class="line"><span class="string">    host3:</span></span><br><span class="line"><span class="string">    host3: This is not an error message; everything may continue to work properly,</span></span><br><span class="line"><span class="string">    host3: in which case you may ignore this message.</span></span><br><span class="line"><span class="string">==&gt; host3: Setting hostname...</span></span><br><span class="line"><span class="string">==&gt; host3: Configuring and enabling network interfaces...</span></span><br><span class="line"><span class="string">==&gt; host3: Rsyncing folder: /cygdrive/d/tool/vms/ =&gt; /vagrant</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">D:\tool\vms</span></span><br><span class="line"><span class="string">$</span></span><br></pre></td></tr></tbody></table></figure>

<p>命令执行成功后，由于新创建的虚拟机暂不支持密码和root用户登录，需要在当前命令行分别对三台虚拟机修改ssh配置，以host1为例</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vagrant ssh host1</span><br></pre></td></tr></tbody></table></figure>

<p>切换到root用户，密码vagrant</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">su - root</span><br></pre></td></tr></tbody></table></figure>

<p>修改/etc/ssh/sshd_confg，放开root远程登录(PermitRootLogin yes)和密码登录(PasswordAuthentication yes)</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@host1 ~]# cat /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash">       <span class="variable">$OpenBSD</span>: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the sshd server system-wide configuration file.  See</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sshd_config(5) <span class="keyword">for</span> more information.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This sshd was compiled with PATH=/usr/<span class="built_in">local</span>/bin:/usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The strategy used <span class="keyword">for</span> options <span class="keyword">in</span> the default sshd_config shipped with</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenSSH is to specify options with their default value <span class="built_in">where</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> possible, but leave them commented.  Uncommented options override the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> default value.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you want to change the port on a SELinux system, you have to tell</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SELinux about this change.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> semanage port -a -t ssh_port_t -p tcp <span class="comment">#PORTNUMBER</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Port 22</span></span><br><span class="line"><span class="meta">#</span><span class="bash">AddressFamily any</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ListenAddress 0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ListenAddress ::</span></span><br><span class="line"></span><br><span class="line">HostKey /etc/ssh/ssh_host_rsa_key</span><br><span class="line"><span class="meta">#</span><span class="bash">HostKey /etc/ssh/ssh_host_dsa_key</span></span><br><span class="line">HostKey /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">HostKey /etc/ssh/ssh_host_ed25519_key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ciphers and keying</span></span><br><span class="line"><span class="meta">#</span><span class="bash">RekeyLimit default none</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Logging</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SyslogFacility AUTH</span></span><br><span class="line">SyslogFacility AUTHPRIV</span><br><span class="line"><span class="meta">#</span><span class="bash">LogLevel INFO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Authentication:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">LoginGraceTime 2m</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta">#</span><span class="bash">StrictModes yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">MaxAuthTries 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash">MaxSessions 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PubkeyAuthentication yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> but this is overridden so installations will only check .ssh/authorized_keys</span></span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">AuthorizedPrincipalsFile none</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">AuthorizedKeysCommand none</span></span><br><span class="line"><span class="meta">#</span><span class="bash">AuthorizedKeysCommandUser nobody</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For this to work you will also need host keys <span class="keyword">in</span> /etc/ssh/ssh_known_hosts</span></span><br><span class="line"><span class="meta">#</span><span class="bash">HostbasedAuthentication no</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change to yes <span class="keyword">if</span> you don<span class="string">'t trust ~/.ssh/known_hosts for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HostbasedAuthentication</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IgnoreUserKnownHosts no</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">'t read the user'</span>s ~/.rhosts and ~/.shosts files</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IgnoreRhosts yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">disable</span> tunneled clear text passwords, change to no here!</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PasswordAuthentication yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PermitEmptyPasswords no</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change to no to <span class="built_in">disable</span> s/key passwords</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ChallengeResponseAuthentication yes</span></span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Kerberos options</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KerberosAuthentication no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KerberosOrLocalPasswd yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KerberosTicketCleanup yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KerberosGetAFSToken no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KerberosUseKuserok yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GSSAPI options</span></span><br><span class="line">GSSAPIAuthentication yes</span><br><span class="line">GSSAPICleanupCredentials no</span><br><span class="line"><span class="meta">#</span><span class="bash">GSSAPIStrictAcceptorCheck yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">GSSAPIKeyExchange no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">GSSAPIEnablek5users no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set this to <span class="string">'yes'</span> to <span class="built_in">enable</span> PAM authentication, account processing,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and session processing. If this is enabled, PAM authentication will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> be allowed through the ChallengeResponseAuthentication and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PasswordAuthentication.  Depending on your PAM configuration,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PAM authentication via ChallengeResponseAuthentication may bypass</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the setting of <span class="string">"PermitRootLogin without-password"</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you just want the PAM account and session checks to run without</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PAM authentication, <span class="keyword">then</span> <span class="built_in">enable</span> this but <span class="built_in">set</span> PasswordAuthentication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and ChallengeResponseAuthentication to <span class="string">'no'</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WARNING: <span class="string">'UsePAM no'</span> is not supported <span class="keyword">in</span> Red Hat Enterprise Linux and may cause several</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> problems.</span></span><br><span class="line">UsePAM yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">AllowAgentForwarding yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">AllowTcpForwarding yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">GatewayPorts no</span></span><br><span class="line">X11Forwarding yes</span><br><span class="line"><span class="meta">#</span><span class="bash">X11DisplayOffset 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash">X11UseLocalhost yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PermitTTY yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PrintMotd yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PrintLastLog yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">TCPKeepAlive yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">UseLogin no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">UsePrivilegeSeparation sandbox</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PermitUserEnvironment no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Compression delayed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ClientAliveInterval 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ClientAliveCountMax 3</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ShowPatchLevel no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">UseDNS yes</span></span><br><span class="line">UseDNS no</span><br><span class="line"><span class="meta">#</span><span class="bash">PidFile /var/run/sshd.pid</span></span><br><span class="line"><span class="meta">#</span><span class="bash">MaxStartups 10:30:100</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PermitTunnel no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ChrootDirectory none</span></span><br><span class="line"><span class="meta">#</span><span class="bash">VersionAddendum none</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> no default banner path</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Banner none</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Accept locale-related environment variables</span></span><br><span class="line">AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES</span><br><span class="line">AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT</span><br><span class="line">AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE</span><br><span class="line">AcceptEnv XMODIFIERS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> override default of no subsystems</span></span><br><span class="line">Subsystem       sftp    /usr/libexec/openssh/sftp-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example of overriding settings on a per-user basis</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Match User anoncvs</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       X11Forwarding no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       AllowTcpForwarding no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       PermitTTY no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       ForceCommand cvs server</span></span><br></pre></td></tr></tbody></table></figure>

<p>重启sshd服务</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></tbody></table></figure>

<p>然后执行两次exit退出host1，对host2和host3执行上述操作，至此，3台虚拟机都可以通过ssh工具进行远程连接了。</p>
<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><p>使用mobaxterm连接三台虚拟机，使用multiexec模式对所有终端进行操作</p>
<p><img src="/mysource/image-20210614165850097.png" alt="image-20210614165850097"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure>

<p>安装完成，启动docker</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>

<p>设置为开机启动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></tbody></table></figure>

<p>设置docker的国内镜像加速器，登录<a href="dev.aliyun.com">dev.aliyun.com</a>,点击控制台，搜索，容器镜像服务，找到镜像加速器，按照自己的虚拟机版本执行命令，例</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://2t5ue6h6.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Kubernetes部署环境准备"><a href="#Kubernetes部署环境准备" class="headerlink" title="Kubernetes部署环境准备"></a>Kubernetes部署环境准备</h1><p>关闭防火墙</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></tbody></table></figure>

<p>关闭selinux</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/enforcing/disabled/'</span> /etc/selinux/config  <span class="comment">#永久</span></span><br><span class="line">setenforce 0  <span class="comment">#临时</span></span><br></pre></td></tr></tbody></table></figure>

<p>关闭swap（k8s禁止虚拟内存以提高性能）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sed -ri <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab <span class="comment">#永久</span></span><br><span class="line">swapoff -a <span class="comment">#临时</span></span><br></pre></td></tr></tbody></table></figure>

<p>在master添加hosts</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.56.101 k8smaster</span></span><br><span class="line"><span class="string">192.168.56.102 k8snode1</span></span><br><span class="line"><span class="string">192.168.56.103 k8snode2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>

<p>设置网桥参数</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system  <span class="comment">#生效</span></span><br></pre></td></tr></tbody></table></figure>

<p>时间同步</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
</search>
